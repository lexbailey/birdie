Birdie. The scripting language for golfing.
Influence heavily by perl and yet looks nothing like it.
Written by Daniel Bailey.
Designed to get your script working in as few characters as possible.
It's all a little bit backwards and contains hints of magic throughout. Enjoy.
BTW. It turns out that birdie is much like lisp in some aspects but not many. I have never used lisp and so this is an accident.

Comments start with a hash slash slash (#//) or a shebang-slash (#!/)
The theory is that comments are not things you need when golfing so it makes sense to use a long-ish pattern in order to allow the reuse of the hash symbol as an operator.
When writing a birdie script, you will no doubt want a shebang followed by a slash and so this is ignored. To ensure you aren't required to do this for every comment and cause confusion, another slash is allowed to replace the bang.

#!/usr/bin/env birdie
#//blah blah comment blah

Numerical literals are slightly backwards!

7-
is seven below zero

70-
is seventy below zero

This allows expressions to be prefix.

+2 4
translates to "add four to two" (=6)

and thus...

+2 4-
translates to "add minus four to two" (=-2)

variable names are all lower case.
functions are upper case.

functions are postfix and require that a single quote ' be put at the start of their list of inputs.

'2 3 FOO

The above calls FOO with the inputs 2 and 3

lists of inputs only need to be separated if they would otherwise be misinterpreted.
For example, to pass in a string and then a number to the FOO function, you can do this:

'  "String'1234  FOO

(More on the odd string syntax later)

If you wanted to pass in a string followed by 12 and then 34, you just do this:

'  "String'12 34  FOO

If you want clarity, you can add space between any arguments

'  "String' 12 34  FOO

Because function names cannot contain digits, the following is acceptable:

'2 3FOO

This is slightly shorter than a more common syntax such as c's syntax:

FOO(2,3);

as variable names are only lower case, a function call with an integer literal followed by a variable identifier can be really short

'2barFOO
This calls the FOO function with the arguments '2' and 'bar';

again, this presents a saving over c syntax like this:

FOO(2,bar);

String literals are also a little odd. They start with a double quote and end with a single quote. like so...

"hi'

This allows double quotes to be used with no issue:

"hi "Joe"'
=> hi "Joe"

single quotes within strings are possible with two single quotes in a row:

"It isn''t a problem'
=> It isn't a problem

This lets you use two in a row in an argument list for a function without a space to seperate them.

'"foo'"bar'QUUX
Call the QUUX function on 'foo' and 'bar'

Again, saves some chars over C syntax;

QUUX("foo","bar");

Variables
Variable assignments are almost like function calls where the function being called starts with the character '='.
For example, to set 'a' to the string "foo', use to following:

'"foo'=a

More examples

'1=b
'23.4-=c

if you count the definitions too then this is much much cheaper then C syntax.
it is little or no advantage over languages like perl an python. Birdie syntax beats them in other places however.
To print a and b in perl is like this:
print$a,$b;

While in birdie it is like this:
'a bP

Most of the advantage is in the shorter name of the print function, even if perl's was shorter, birdie still wins by lack of qualifiers before variable names;
perl:   p$a,$b;     #7 character command minimum
birdie: 'a bP       #//5 character command minimum

Stack
Birdie also has a stack. Stack mode is entered whenever a caret (^) is detected. Exiting is done in the same way
in this mode, each function call only needs to know how many items to lift off the stack to use for it's function.
Suppose you have three strings on the top of the stack and you want to print them all;

'3P

To push onto the stack (from stack mode or normal mode) you can use the stack push operator close square bracket (])

to push the number 7 on to the stack you do this;

]7

to pop a value you use the open square bracket operator ([)
this program puts 3 and 4 on the stack, enters stack mode, adds them, prints the result and then reverts to normal mode.

]3
]4
^
+
'1P
^

This can all be done on one line if so desired

]3]4^+'1P^

in this case, normal mode provides a cleaner and shorter syntax:

'+3 4P

This program can also work without entering stack mode by poping the values when needed

]3
]4
]+[[
'[P

When in stack mode you can call a function that takes a fixed number of inputs without specifying the number to take from the stack.
Suppose you have a function so calculate a square root "SQRT". To calculate the square root of four you can do this:

^
]4
'SQRT

Functions that can take multiple inputs will only take one item off the stack if they are called in this way in stack mode

^
]"hi'
]"there'
'P          #//prints "there"


^
]"hi'
]"there'
'2P          #//prints "hithere"

You can call a function multiple times in stack mode using only one line. To do this the function must take a fixed number of instructions.
To do this, in stack mode, call a function and ask for a multiple of the fixed number of arguments.

]4
]25
^
'2SQRT

The program above pushes 4 on to the stack and then pushes 25 on to the stack then enters stack mode. After this, the SQRT function is called twice. The SQRT function takes one input and so when asking for it to act on two inputs, it produces two results. All of the outputs are calculated and then pushed back on to the stack. The results are pushed to the stack in reverse order of calculation. This preserves some kind of order on the stack.
In the example above the stack after the SQRT would look like this:

5
2

because 2 is the square root of 4 and 5 is the sqare root of 25. 25 was the last item pushed on to the stack and so 5 is on top of the stack.

if in stack mode, you call a function that takes an unlimited number of arguments, it will take only the first item off the stack. This item can however be a list. More on lists later.

Now this is where it gets a little bit magical. The stack is itself part of a stack. The state of the stack is also part of the stack.
The stack state is simply autopush or not? and stack mode or not?
Stack mode (off by default) is what you have seen already.
Autopush mode (on by default) is where all function returns are pushed on to the stack.

When your program starts, stack mode is off and autopush mode is on, you can change this and then call a function, when that function runs, it may be assuming that the default is still present and that stack mode is off. For this reason, there is a stack mode stack. When you call a function, the stack mode is automatically pushed onto the stack mode stack. The function then runs and then the stack mode is popped. It is not possible to manually push or pop the stack mode stack.
In autopush mode, when a function returns, its result is pushed to the stack. It is possible however that the functino you called needed to make use of the stack. For this reason there is a stack stack. When a function is called, a blank stack is pushed on to the stack stack regardless of any current stack modes. When the function returns this new stack is then automatically popped from the stack stack.
It is possible to manually push and pop this stack. The stack stack push operator is a close curly brace (}) and the stack stack pop operator is an open curly brace({)
A function may intend to work on the copy of the stack that was there before it was called (this is not common behaviour but is possible) in this case the function starts with a stack stack pop ({) to remove its own fresh stack and ends with a push (}) so that the automatic pop behaves as expected and there is no stack stack underflow. If you want to ensure that your own stack is preserved during such a funciton call then you should push the stack stack before you do the call (and pop after if/when needed).

}
'STACKFUNCTION
{


LISTS!
here is a list;

2 3 4 5 6

You have already seen lists. In effect, each function only takes one input, that input is a list.

here is another list:

"earth' "gravity' 9.8-

The last list can be done with no spaces:

"earth'"gravity'9.8-

This can be passed to a function like the print function, with or without spaces

' "earth'"gravity'9.8- P
'"earth'"gravity'9.8-P

It can also be assigned to a variable

'"earth'"gravity'9.8-=a

That variable can then be used in the print function:

'aP

Now what happens when you add something else to the list?

' a "foo' P

In this case, you get a single longer list, "foo" is the last item in this list, the list passed to the function would be "earth'"gravity'9.8-"foo' .
If what you wanted was a list with two items in it, the first of which is a list that contains the "earth", "gravity" and -9.8 items and the second is the string "foo" then you should use the list lister operator (,). As with all other binary operaters, this is prefix.

,a"foo'

You can turn a string into a list of individual characters (stored as strings of length one) by using the dollar operator ($).

'$"Blah'=a

In this example 'a' is now a list of length 4: "B", "l", "a", "h".

To access an element of a list by its position in the list, use the dot operator. As always, this is prefix.

'2 3 4 5=a
'.a3=b
'bP         ~prints '4'

Other stuff...

Do FOO if a...

'a?'FOO\

this will execute FOO if a is true (trueness is defined later). else blocks are done differently:

'a?'FOO:'BAR:



'a?'b?'FOO:'BAR\'QUUX:		~ugly but it works, see below

'a?				~is a true?
	'b?			~is b true?
		'FOO	~then do FOO (if a is true and b is true)
	:			~else
		'BAR	~do BAR	(if a is true and b is false)
\				~else
	'QUUX		~do QUUX (if a is false)
:

This is a compact example. This uses the backslash in the place of two colons in the interest of using fewer characters.
perhaps a more readable version is this:

'a? 'b? 'FOO : 'BAR : : 'QUUX :

The b? can be seen as a seperate conditional block.

'b? 'FOO : 'BAR :

If we reduce this to <b_cond> then we see that the 'a' conditional is similar

'a? <b_cond> : 'QUUX :

This is all slight magic however, this is implemented in a way that lets you do some crazy things if you want to (and know what you are doing)
So.. Is your mind suitably flexible? I'm about to bend it around a tight corner. :-)
Drumroll please......  Introducing... the condition stack. (yes, another stack, as if it wasn't enough to have a stack of stacks controlled by a stack state stack).
The condition stack is mostly handled internally by magic, however, you can do some prety crazy waky stuff with it.

There are four conditional stack operators:
?
??
:
\

The single question mark will do the following;
 - invert the condition and then boolean AND it with the condition with the top of the stack, then push this to the stack.
 - take the original condition and then boolean AND it with the condition that was on top of the stack (now second), then push this to the stack too.

The double questionmark, does slightly less;
 - take the original condition and then boolean AND it with the condition that is on top of the stack, then push this to the stack.
 
The colon will pop one item from this stack and the backslash will pop two items. Any commands that are not condition stack commands will only execute if the top of the condition stack is a 'true' value;

Lets use the last example to explain this stack...

'a?				~push '!a' to the condition stack, then push the 'a' condition on to the condition stack (condition stack top is now: 'a', '!a')
	'b?			~and '!b' with the top of the condition stack and push to the condition stack. Then and 'b' with the top of the condition stack and push to the condition stack (stack top is now '& a b', '& a !b', 'a', '!a')
		'FOO	~do foo if the top of the condition stack is true (& a b is true)
	:			~pop the condition stack (stack top is now: '& a !b', 'a', '!a')
		'BAR	~do BAR	if the top of the condition stack is true (& a !b is true)
\				~pop the condition stack twice (stack top is now: '!a')
	'QUUX		~do QUUX if the top of the condition stack is true (!a is true)
:				~pop the condition stack (stack is now at reset)

In this example, even if a is false, the stack will still internally handle the b condition, this will be ignored by definition but is simpler to implement. Anyway, point is commands that don't involve the condition stack are not executed if the condition stack top is a 'false' value. That's how the magic happens.

So... what is false? what is true?

For an integer, this is simple, true is anything that is not exactly 0.
For a float, this is trickyer, anything above 0 is considered true, anything below is false. This can be a gotcha, watch out.
For a string, it is false if it is any of the following;
 - "" (empty string)
 - "no"
 - "No"
 - "NO"
 - "0"
 - "n"
 - "N"
 - "-"
 - "off"   
 - "Off"
 - "OFF"
 - "false"
 - "False"
 - "FALSE"
 - "disabled"
 - "Disabled"
 - "DISABLED"
 - "null"
 - "Null"
 - "NULL" 
 - "nil"
 - "Nil"
 - "NIL"
 - "!"
 - "~"
 
Any other value for a string is defined as true. You can probably see that this can allow some magic to happen.

Now is a good time to define what happens when something is inverted (boolean invert with an exclamation mark - !)

Inverting any string that represents is a false value is well defined. (except perhaps for emptystring which, by design, presents ten random characters)
This is what happens...

!"'			=		"d^uc9$k;'#" (as an example only. inverting an empty string gets you a random string of 10 characters. It won't always contain the word 'duck' :D)
!"no'		=		"yes"
!"No'		=		"Yes"
!"NO'		=		"YES"
!"0'		=		"1"
!"n'		=		"y"
!"N'		=		"Y"
!"-'		=		"+"
!"off'		=		"on"
!"Off'		=		"On"
!"OFF'		=		"ON"
!"false'	=		"true"
!"False'	=		"True"
!"FALSE'	=		"TRUE"
!"disabled'	=		"enabled"
!"Disabled'	=		"Enabled"
!"DISABLED'	=		"ENABLED"
!"null'		=		"full"
!"Null'		=		"Full"
!"NULL'		=		"FULL"
!"nil'		=		"123456789"
!"Nil'		=		"abcdefghijklmnopqrstuvwqyz"
!"NIL'		=		"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
!"!'		=		"!!"
!"~'		=		"~~"

(all obvious reversals apply)

!"yes'		=		"no"
!"Yes'		=		"No"
!"YES'		=		"NO"
!"1'		=		"0"
!"y'		=		"n"
!"Y'		=		"N"
!"+'		=		"-"
!"on'		=		"off"
!"On'		=		"Off"
!"ON'		=		"OFF"
!"true'		=		"false"
!"True'		=		"False"
!"TRUE'		=		"FALSE"
!"enabled'	=		"disabled"
!"Enabled'	=		"Disabled"
!"ENABLED'	=		"DISABLED"
!"full'		=		"null"
!"Full'		=		"Null"
!"FULL'		=		"NULL"
!"!!'		=		"!"
!"~~'		=		"~"

For integers, this is also well defined, any non-zero value becomes zero, zero becomes 1 therefore, if you put two exclamation marks (!!) before any integer that isn't zero, it becomes 1. This trick can be used as a sort of normalise function...

!0 = 1
!1 = 0
!2 = 0
!3 = 0
...
!n = 0 for any non zero value of n

!!0 = 0
!!1 = 1
!!2 = 1
!!3 = 1
...
!!n = 1 for any non zero value of n

So, if you want to clear (set to zero) an integer (let's call it 'a') if another integer (let's say 'b') is a true value (not zero) you can do this...

'*a!b=a

This one char more compact than using the condition stack for such an operation:

'b?'0=a\

Note that inverting floats is the same as subtracting them from 0 (remember that birdie signs are backwards)

!23.5-		=		23.5

!0.1		=		0.1-











